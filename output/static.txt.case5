static
Case5



min_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-10T21:21:45Z
Start Date (ms): 0 End Date (ms): 32390505000 Duration (ms): 32390505000 Window Duration (ms): 161952525
Calculated window duration: 161952525ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "sensordata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-10T21:21:45Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v4" or r["_field"] == "v3" or r["_field"] == "v2" or r["_field"] == "v1" or r["_field"] == "v7" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v5) + (float(v: 0.04)) * float(v: r.v4) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v1) + (float(v: 0.03)) * float(v: r.v7) + (float(v: 0.27)) * float(v: r.v6) }))
    

    
        pivoted
        |> aggregateWindow(every: 161952525ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 161952525ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 161952525ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 161952525ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 735220.48 ms, called 2 times
Total time for totaltime: 735227.00 ms, called 1 times
experiment: IFX-F ; table: sensordata ; interacttype:  ; columns: 5,4,3,2,1,7,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 735.227 ; sqltime: 735.220
Case5



min_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-10T21:21:45Z
Start Date (ms): 0 End Date (ms): 32390505000 Duration (ms): 32390505000 Window Duration (ms): 80976262
Calculated window duration: 80976262ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "sensordata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-10T21:21:45Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v4" or r["_field"] == "v3" or r["_field"] == "v2" or r["_field"] == "v1" or r["_field"] == "v7" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v5) + (float(v: 0.04)) * float(v: r.v4) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v1) + (float(v: 0.03)) * float(v: r.v7) + (float(v: 0.27)) * float(v: r.v6) }))
    

    
        pivoted
        |> aggregateWindow(every: 80976262ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 80976262ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 80976262ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 80976262ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 701745.09 ms, called 2 times
Total time for totaltime: 701748.18 ms, called 1 times
experiment: IFX-F ; table: sensordata ; interacttype:  ; columns: 5,4,3,2,1,7,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 701.748 ; sqltime: 701.745
Case5



min_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-10T21:21:45Z
Start Date (ms): 0 End Date (ms): 32390505000 Duration (ms): 32390505000 Window Duration (ms): 53984175
Calculated window duration: 53984175ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "sensordata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-10T21:21:45Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v4" or r["_field"] == "v3" or r["_field"] == "v2" or r["_field"] == "v1" or r["_field"] == "v7" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v5) + (float(v: 0.04)) * float(v: r.v4) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v1) + (float(v: 0.03)) * float(v: r.v7) + (float(v: 0.27)) * float(v: r.v6) }))
    

    
        pivoted
        |> aggregateWindow(every: 53984175ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 53984175ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 53984175ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 53984175ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 700975.12 ms, called 2 times
Total time for totaltime: 700978.40 ms, called 1 times
experiment: IFX-F ; table: sensordata ; interacttype:  ; columns: 5,4,3,2,1,7,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 700.978 ; sqltime: 700.975
Case5



min_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-10T21:21:45Z
Start Date (ms): 0 End Date (ms): 32390505000 Duration (ms): 32390505000 Window Duration (ms): 40488131
Calculated window duration: 40488131ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "sensordata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-10T21:21:45Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v4" or r["_field"] == "v3" or r["_field"] == "v2" or r["_field"] == "v1" or r["_field"] == "v7" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v5) + (float(v: 0.04)) * float(v: r.v4) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v1) + (float(v: 0.03)) * float(v: r.v7) + (float(v: 0.27)) * float(v: r.v6) }))
    

    
        pivoted
        |> aggregateWindow(every: 40488131ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 40488131ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 40488131ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 40488131ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 715915.81 ms, called 2 times
Total time for totaltime: 715921.49 ms, called 1 times
experiment: IFX-F ; table: sensordata ; interacttype:  ; columns: 5,4,3,2,1,7,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 715.921 ; sqltime: 715.916
Case5



min_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-10T21:21:45Z
Start Date (ms): 0 End Date (ms): 32390505000 Duration (ms): 32390505000 Window Duration (ms): 32390505
Calculated window duration: 32390505ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "sensordata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-10T21:21:45Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v4" or r["_field"] == "v3" or r["_field"] == "v2" or r["_field"] == "v1" or r["_field"] == "v7" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v5) + (float(v: 0.04)) * float(v: r.v4) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v1) + (float(v: 0.03)) * float(v: r.v7) + (float(v: 0.27)) * float(v: r.v6) }))
    

    
        pivoted
        |> aggregateWindow(every: 32390505ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 32390505ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 32390505ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 32390505ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 731744.66 ms, called 2 times
Total time for totaltime: 731749.54 ms, called 1 times
experiment: IFX-F ; table: sensordata ; interacttype:  ; columns: 5,4,3,2,1,7,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 731.750 ; sqltime: 731.745
Case5



min_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-10T21:21:45Z
Start Date (ms): 0 End Date (ms): 32390505000 Duration (ms): 32390505000 Window Duration (ms): 26992087
Calculated window duration: 26992087ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "sensordata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-10T21:21:45Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v4" or r["_field"] == "v3" or r["_field"] == "v2" or r["_field"] == "v1" or r["_field"] == "v7" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v5) + (float(v: 0.04)) * float(v: r.v4) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v1) + (float(v: 0.03)) * float(v: r.v7) + (float(v: 0.27)) * float(v: r.v6) }))
    

    
        pivoted
        |> aggregateWindow(every: 26992087ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 26992087ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 26992087ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 26992087ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 683296.93 ms, called 2 times
Total time for totaltime: 683305.77 ms, called 1 times
experiment: IFX-F ; table: sensordata ; interacttype:  ; columns: 5,4,3,2,1,7,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 683.306 ; sqltime: 683.297
Case5



min_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-10T21:21:45Z
Start Date (ms): 0 End Date (ms): 32390505000 Duration (ms): 32390505000 Window Duration (ms): 161952525
Calculated window duration: 161952525ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "sensordata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-10T21:21:45Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v4" or r["_field"] == "v3" or r["_field"] == "v2" or r["_field"] == "v1" or r["_field"] == "v7" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 161952525ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 161952525ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 161952525ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 161952525ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 3950462.87 ms, called 2 times
Total time for totaltime: 3950464.90 ms, called 1 times
experiment: IFX-F ; table: sensordata ; interacttype:  ; columns: 5,4,3,2,1,7,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 3950.465 ; sqltime: 3950.463
Case5



min_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-10T21:21:45Z
Start Date (ms): 0 End Date (ms): 32390505000 Duration (ms): 32390505000 Window Duration (ms): 80976262
Calculated window duration: 80976262ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "sensordata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-10T21:21:45Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v4" or r["_field"] == "v3" or r["_field"] == "v2" or r["_field"] == "v1" or r["_field"] == "v7" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 80976262ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 80976262ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 80976262ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 80976262ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 3566845.92 ms, called 2 times
Total time for totaltime: 3566848.39 ms, called 1 times
experiment: IFX-F ; table: sensordata ; interacttype:  ; columns: 5,4,3,2,1,7,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 3566.848 ; sqltime: 3566.846
Case5



min_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-10T21:21:45Z
Start Date (ms): 0 End Date (ms): 32390505000 Duration (ms): 32390505000 Window Duration (ms): 53984175
Calculated window duration: 53984175ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "sensordata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-10T21:21:45Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v4" or r["_field"] == "v3" or r["_field"] == "v2" or r["_field"] == "v1" or r["_field"] == "v7" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 53984175ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 53984175ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 53984175ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 53984175ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 3253343.94 ms, called 2 times
Total time for totaltime: 3253347.82 ms, called 1 times
experiment: IFX-F ; table: sensordata ; interacttype:  ; columns: 5,4,3,2,1,7,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 3253.348 ; sqltime: 3253.344
Case5



min_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-10T21:21:45Z
Start Date (ms): 0 End Date (ms): 32390505000 Duration (ms): 32390505000 Window Duration (ms): 40488131
Calculated window duration: 40488131ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "sensordata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-10T21:21:45Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v4" or r["_field"] == "v3" or r["_field"] == "v2" or r["_field"] == "v1" or r["_field"] == "v7" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 40488131ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 40488131ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 40488131ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 40488131ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 3001229.43 ms, called 2 times
Total time for totaltime: 3001233.88 ms, called 1 times
experiment: IFX-F ; table: sensordata ; interacttype:  ; columns: 5,4,3,2,1,7,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 3001.234 ; sqltime: 3001.229
Case5



min_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-10T21:21:45Z
Start Date (ms): 0 End Date (ms): 32390505000 Duration (ms): 32390505000 Window Duration (ms): 32390505
Calculated window duration: 32390505ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "sensordata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-10T21:21:45Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v4" or r["_field"] == "v3" or r["_field"] == "v2" or r["_field"] == "v1" or r["_field"] == "v7" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 32390505ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 32390505ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 32390505ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 32390505ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 2992386.76 ms, called 2 times
Total time for totaltime: 2992391.46 ms, called 1 times
experiment: IFX-F ; table: sensordata ; interacttype:  ; columns: 5,4,3,2,1,7,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 2992.391 ; sqltime: 2992.387
Case5



min_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "sensordata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "sensordata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-10T21:21:45Z
Start Date (ms): 0 End Date (ms): 32390505000 Duration (ms): 32390505000 Window Duration (ms): 26992087
Calculated window duration: 26992087ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "sensordata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-10T21:21:45Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v4" or r["_field"] == "v3" or r["_field"] == "v2" or r["_field"] == "v1" or r["_field"] == "v7" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 26992087ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 26992087ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 26992087ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 26992087ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 3040118.13 ms, called 2 times
Total time for totaltime: 3040121.56 ms, called 1 times
experiment: IFX-F ; table: sensordata ; interacttype:  ; columns: 5,4,3,2,1,7,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 3040.122 ; sqltime: 3040.118
Case5



min_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-03-18T02:37:09Z
Start Date (ms): 0 End Date (ms): 6575829000 Duration (ms): 6575829000 Window Duration (ms): 32879145
Calculated window duration: 32879145ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "soccerdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-03-18T02:37:09Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v3" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v4" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v5) + (float(v: 0.04)) * float(v: r.v3) + (float(v: 0.94)) * float(v: r.v1) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v4) + (float(v: 0.03)) * float(v: r.v6) }))
    

    
        pivoted
        |> aggregateWindow(every: 32879145ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 32879145ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 32879145ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 32879145ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 107240.69 ms, called 2 times
Total time for totaltime: 107244.10 ms, called 1 times
experiment: IFX-F ; table: soccerdata ; interacttype:  ; columns: 5,3,1,2,4,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 107.244 ; sqltime: 107.241
Case5



min_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-03-18T02:37:09Z
Start Date (ms): 0 End Date (ms): 6575829000 Duration (ms): 6575829000 Window Duration (ms): 16439572
Calculated window duration: 16439572ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "soccerdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-03-18T02:37:09Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v3" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v4" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v5) + (float(v: 0.04)) * float(v: r.v3) + (float(v: 0.94)) * float(v: r.v1) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v4) + (float(v: 0.03)) * float(v: r.v6) }))
    

    
        pivoted
        |> aggregateWindow(every: 16439572ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 16439572ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 16439572ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 16439572ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 107785.56 ms, called 2 times
Total time for totaltime: 107788.16 ms, called 1 times
experiment: IFX-F ; table: soccerdata ; interacttype:  ; columns: 5,3,1,2,4,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 107.788 ; sqltime: 107.786
Case5



min_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-03-18T02:37:09Z
Start Date (ms): 0 End Date (ms): 6575829000 Duration (ms): 6575829000 Window Duration (ms): 10959715
Calculated window duration: 10959715ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "soccerdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-03-18T02:37:09Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v3" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v4" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v5) + (float(v: 0.04)) * float(v: r.v3) + (float(v: 0.94)) * float(v: r.v1) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v4) + (float(v: 0.03)) * float(v: r.v6) }))
    

    
        pivoted
        |> aggregateWindow(every: 10959715ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 10959715ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 10959715ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 10959715ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 114977.11 ms, called 2 times
Total time for totaltime: 114980.01 ms, called 1 times
experiment: IFX-F ; table: soccerdata ; interacttype:  ; columns: 5,3,1,2,4,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 114.980 ; sqltime: 114.977
Case5



min_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-03-18T02:37:09Z
Start Date (ms): 0 End Date (ms): 6575829000 Duration (ms): 6575829000 Window Duration (ms): 8219786
Calculated window duration: 8219786ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "soccerdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-03-18T02:37:09Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v3" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v4" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v5) + (float(v: 0.04)) * float(v: r.v3) + (float(v: 0.94)) * float(v: r.v1) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v4) + (float(v: 0.03)) * float(v: r.v6) }))
    

    
        pivoted
        |> aggregateWindow(every: 8219786ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 8219786ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 8219786ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 8219786ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 114997.02 ms, called 2 times
Total time for totaltime: 115001.98 ms, called 1 times
experiment: IFX-F ; table: soccerdata ; interacttype:  ; columns: 5,3,1,2,4,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 115.002 ; sqltime: 114.997
Case5



min_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-03-18T02:37:09Z
Start Date (ms): 0 End Date (ms): 6575829000 Duration (ms): 6575829000 Window Duration (ms): 6575829
Calculated window duration: 6575829ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "soccerdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-03-18T02:37:09Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v3" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v4" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v5) + (float(v: 0.04)) * float(v: r.v3) + (float(v: 0.94)) * float(v: r.v1) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v4) + (float(v: 0.03)) * float(v: r.v6) }))
    

    
        pivoted
        |> aggregateWindow(every: 6575829ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 6575829ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 6575829ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 6575829ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 119080.37 ms, called 2 times
Total time for totaltime: 119085.80 ms, called 1 times
experiment: IFX-F ; table: soccerdata ; interacttype:  ; columns: 5,3,1,2,4,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 119.086 ; sqltime: 119.080
Case5



min_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-03-18T02:37:09Z
Start Date (ms): 0 End Date (ms): 6575829000 Duration (ms): 6575829000 Window Duration (ms): 5479857
Calculated window duration: 5479857ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "soccerdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-03-18T02:37:09Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v3" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v4" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v5) + (float(v: 0.04)) * float(v: r.v3) + (float(v: 0.94)) * float(v: r.v1) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v4) + (float(v: 0.03)) * float(v: r.v6) }))
    

    
        pivoted
        |> aggregateWindow(every: 5479857ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 5479857ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 5479857ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 5479857ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 110377.21 ms, called 2 times
Total time for totaltime: 110384.16 ms, called 1 times
experiment: IFX-F ; table: soccerdata ; interacttype:  ; columns: 5,3,1,2,4,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 110.384 ; sqltime: 110.377
Case5



min_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-03-18T02:37:09Z
Start Date (ms): 0 End Date (ms): 6575829000 Duration (ms): 6575829000 Window Duration (ms): 32879145
Calculated window duration: 32879145ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "soccerdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-03-18T02:37:09Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v3" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v4" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 32879145ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 32879145ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 32879145ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 32879145ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 663073.94 ms, called 2 times
Total time for totaltime: 663075.85 ms, called 1 times
experiment: IFX-F ; table: soccerdata ; interacttype:  ; columns: 5,3,1,2,4,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 663.076 ; sqltime: 663.074
Case5



min_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-03-18T02:37:09Z
Start Date (ms): 0 End Date (ms): 6575829000 Duration (ms): 6575829000 Window Duration (ms): 16439572
Calculated window duration: 16439572ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "soccerdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-03-18T02:37:09Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v3" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v4" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 16439572ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 16439572ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 16439572ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 16439572ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 677688.89 ms, called 2 times
Total time for totaltime: 677690.74 ms, called 1 times
experiment: IFX-F ; table: soccerdata ; interacttype:  ; columns: 5,3,1,2,4,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 677.691 ; sqltime: 677.689
Case5



min_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-03-18T02:37:09Z
Start Date (ms): 0 End Date (ms): 6575829000 Duration (ms): 6575829000 Window Duration (ms): 10959715
Calculated window duration: 10959715ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "soccerdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-03-18T02:37:09Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v3" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v4" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 10959715ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 10959715ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 10959715ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 10959715ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 652792.87 ms, called 2 times
Total time for totaltime: 652796.89 ms, called 1 times
experiment: IFX-F ; table: soccerdata ; interacttype:  ; columns: 5,3,1,2,4,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 652.797 ; sqltime: 652.793
Case5



min_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-03-18T02:37:09Z
Start Date (ms): 0 End Date (ms): 6575829000 Duration (ms): 6575829000 Window Duration (ms): 8219786
Calculated window duration: 8219786ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "soccerdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-03-18T02:37:09Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v3" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v4" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 8219786ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 8219786ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 8219786ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 8219786ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 665867.69 ms, called 2 times
Total time for totaltime: 665870.74 ms, called 1 times
experiment: IFX-F ; table: soccerdata ; interacttype:  ; columns: 5,3,1,2,4,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 665.871 ; sqltime: 665.868
Case5



min_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-03-18T02:37:09Z
Start Date (ms): 0 End Date (ms): 6575829000 Duration (ms): 6575829000 Window Duration (ms): 6575829
Calculated window duration: 6575829ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "soccerdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-03-18T02:37:09Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v3" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v4" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 6575829ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 6575829ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 6575829ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 6575829ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 670727.78 ms, called 2 times
Total time for totaltime: 670731.33 ms, called 1 times
experiment: IFX-F ; table: soccerdata ; interacttype:  ; columns: 5,3,1,2,4,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 670.731 ; sqltime: 670.728
Case5



min_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "soccerdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "soccerdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-03-18T02:37:09Z
Start Date (ms): 0 End Date (ms): 6575829000 Duration (ms): 6575829000 Window Duration (ms): 5479857
Calculated window duration: 5479857ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "soccerdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-03-18T02:37:09Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v5" or r["_field"] == "v3" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v4" or r["_field"] == "v6" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 5479857ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 5479857ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 5479857ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 5479857ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 674076.97 ms, called 2 times
Total time for totaltime: 674085.07 ms, called 1 times
experiment: IFX-F ; table: soccerdata ; interacttype:  ; columns: 5,3,1,2,4,6 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 674.085 ; sqltime: 674.077
Case5



min_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-11T10:58:40Z
Start Date (ms): 0 End Date (ms): 903520000 Duration (ms): 903520000 Window Duration (ms): 4517600
Calculated window duration: 4517600ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "stockdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-11T10:58:40Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v9" or r["_field"] == "v5" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v9) + (float(v: 0.04)) * float(v: r.v5) + (float(v: 0.94)) * float(v: r.v1) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v3) + (float(v: 0.03)) * float(v: r.v4) + (float(v: 0.27)) * float(v: r.v6) + (float(v: 0.26)) * float(v: r.v7) + (float(v: 0.6)) * float(v: r.v8) + (float(v: 0.01)) * float(v: r.v10) }))
    

    
        pivoted
        |> aggregateWindow(every: 4517600ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 4517600ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 4517600ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 4517600ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 23944.83 ms, called 2 times
Total time for totaltime: 23946.85 ms, called 1 times
experiment: IFX-F ; table: stockdata ; interacttype:  ; columns: 9,5,1,2,3,4,6,7,8,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 23.947 ; sqltime: 23.945
Case5



min_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-11T10:58:40Z
Start Date (ms): 0 End Date (ms): 903520000 Duration (ms): 903520000 Window Duration (ms): 2258800
Calculated window duration: 2258800ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "stockdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-11T10:58:40Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v9" or r["_field"] == "v5" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v9) + (float(v: 0.04)) * float(v: r.v5) + (float(v: 0.94)) * float(v: r.v1) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v3) + (float(v: 0.03)) * float(v: r.v4) + (float(v: 0.27)) * float(v: r.v6) + (float(v: 0.26)) * float(v: r.v7) + (float(v: 0.6)) * float(v: r.v8) + (float(v: 0.01)) * float(v: r.v10) }))
    

    
        pivoted
        |> aggregateWindow(every: 2258800ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 2258800ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 2258800ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 2258800ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 25464.53 ms, called 2 times
Total time for totaltime: 25466.46 ms, called 1 times
experiment: IFX-F ; table: stockdata ; interacttype:  ; columns: 9,5,1,2,3,4,6,7,8,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 25.466 ; sqltime: 25.465
Case5



min_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-11T10:58:40Z
Start Date (ms): 0 End Date (ms): 903520000 Duration (ms): 903520000 Window Duration (ms): 1505866
Calculated window duration: 1505866ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "stockdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-11T10:58:40Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v9" or r["_field"] == "v5" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v9) + (float(v: 0.04)) * float(v: r.v5) + (float(v: 0.94)) * float(v: r.v1) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v3) + (float(v: 0.03)) * float(v: r.v4) + (float(v: 0.27)) * float(v: r.v6) + (float(v: 0.26)) * float(v: r.v7) + (float(v: 0.6)) * float(v: r.v8) + (float(v: 0.01)) * float(v: r.v10) }))
    

    
        pivoted
        |> aggregateWindow(every: 1505866ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1505866ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1505866ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1505866ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 24715.61 ms, called 2 times
Total time for totaltime: 24719.21 ms, called 1 times
experiment: IFX-F ; table: stockdata ; interacttype:  ; columns: 9,5,1,2,3,4,6,7,8,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 24.719 ; sqltime: 24.716
Case5



min_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-11T10:58:40Z
Start Date (ms): 0 End Date (ms): 903520000 Duration (ms): 903520000 Window Duration (ms): 1129400
Calculated window duration: 1129400ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "stockdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-11T10:58:40Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v9" or r["_field"] == "v5" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v9) + (float(v: 0.04)) * float(v: r.v5) + (float(v: 0.94)) * float(v: r.v1) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v3) + (float(v: 0.03)) * float(v: r.v4) + (float(v: 0.27)) * float(v: r.v6) + (float(v: 0.26)) * float(v: r.v7) + (float(v: 0.6)) * float(v: r.v8) + (float(v: 0.01)) * float(v: r.v10) }))
    

    
        pivoted
        |> aggregateWindow(every: 1129400ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1129400ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1129400ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1129400ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 25700.07 ms, called 2 times
Total time for totaltime: 25703.18 ms, called 1 times
experiment: IFX-F ; table: stockdata ; interacttype:  ; columns: 9,5,1,2,3,4,6,7,8,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 25.703 ; sqltime: 25.700
Case5



min_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-11T10:58:40Z
Start Date (ms): 0 End Date (ms): 903520000 Duration (ms): 903520000 Window Duration (ms): 903520
Calculated window duration: 903520ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "stockdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-11T10:58:40Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v9" or r["_field"] == "v5" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v9) + (float(v: 0.04)) * float(v: r.v5) + (float(v: 0.94)) * float(v: r.v1) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v3) + (float(v: 0.03)) * float(v: r.v4) + (float(v: 0.27)) * float(v: r.v6) + (float(v: 0.26)) * float(v: r.v7) + (float(v: 0.6)) * float(v: r.v8) + (float(v: 0.01)) * float(v: r.v10) }))
    

    
        pivoted
        |> aggregateWindow(every: 903520ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 903520ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 903520ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 903520ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 26282.87 ms, called 2 times
Total time for totaltime: 26287.69 ms, called 1 times
experiment: IFX-F ; table: stockdata ; interacttype:  ; columns: 9,5,1,2,3,4,6,7,8,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 26.288 ; sqltime: 26.283
Case5



min_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-11T10:58:40Z
Start Date (ms): 0 End Date (ms): 903520000 Duration (ms): 903520000 Window Duration (ms): 752933
Calculated window duration: 752933ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "stockdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-11T10:58:40Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v9" or r["_field"] == "v5" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v9) + (float(v: 0.04)) * float(v: r.v5) + (float(v: 0.94)) * float(v: r.v1) + (float(v: 0.57)) * float(v: r.v2) + (float(v: 0.09)) * float(v: r.v3) + (float(v: 0.03)) * float(v: r.v4) + (float(v: 0.27)) * float(v: r.v6) + (float(v: 0.26)) * float(v: r.v7) + (float(v: 0.6)) * float(v: r.v8) + (float(v: 0.01)) * float(v: r.v10) }))
    

    
        pivoted
        |> aggregateWindow(every: 752933ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 752933ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 752933ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 752933ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 24967.49 ms, called 2 times
Total time for totaltime: 24973.88 ms, called 1 times
experiment: IFX-F ; table: stockdata ; interacttype:  ; columns: 9,5,1,2,3,4,6,7,8,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 24.974 ; sqltime: 24.967
Case5



min_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-11T10:58:40Z
Start Date (ms): 0 End Date (ms): 903520000 Duration (ms): 903520000 Window Duration (ms): 4517600
Calculated window duration: 4517600ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "stockdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-11T10:58:40Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v9" or r["_field"] == "v5" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v9), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v8), y: 2.0) + math.pow(x: float(v: r.v10), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 4517600ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 4517600ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 4517600ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 4517600ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 176516.84 ms, called 2 times
Total time for totaltime: 176520.95 ms, called 1 times
experiment: IFX-F ; table: stockdata ; interacttype:  ; columns: 9,5,1,2,3,4,6,7,8,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 176.521 ; sqltime: 176.517
Case5



min_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-11T10:58:40Z
Start Date (ms): 0 End Date (ms): 903520000 Duration (ms): 903520000 Window Duration (ms): 2258800
Calculated window duration: 2258800ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "stockdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-11T10:58:40Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v9" or r["_field"] == "v5" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v9), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v8), y: 2.0) + math.pow(x: float(v: r.v10), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 2258800ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 2258800ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 2258800ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 2258800ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 180024.85 ms, called 2 times
Total time for totaltime: 180026.88 ms, called 1 times
experiment: IFX-F ; table: stockdata ; interacttype:  ; columns: 9,5,1,2,3,4,6,7,8,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 180.027 ; sqltime: 180.025
Case5



min_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-11T10:58:40Z
Start Date (ms): 0 End Date (ms): 903520000 Duration (ms): 903520000 Window Duration (ms): 1505866
Calculated window duration: 1505866ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "stockdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-11T10:58:40Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v9" or r["_field"] == "v5" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v9), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v8), y: 2.0) + math.pow(x: float(v: r.v10), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 1505866ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1505866ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1505866ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1505866ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 181457.75 ms, called 2 times
Total time for totaltime: 181460.25 ms, called 1 times
experiment: IFX-F ; table: stockdata ; interacttype:  ; columns: 9,5,1,2,3,4,6,7,8,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 181.460 ; sqltime: 181.458
Case5



min_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-11T10:58:40Z
Start Date (ms): 0 End Date (ms): 903520000 Duration (ms): 903520000 Window Duration (ms): 1129400
Calculated window duration: 1129400ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "stockdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-11T10:58:40Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v9" or r["_field"] == "v5" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v9), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v8), y: 2.0) + math.pow(x: float(v: r.v10), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 1129400ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1129400ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1129400ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1129400ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 179512.72 ms, called 2 times
Total time for totaltime: 179517.00 ms, called 1 times
experiment: IFX-F ; table: stockdata ; interacttype:  ; columns: 9,5,1,2,3,4,6,7,8,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 179.517 ; sqltime: 179.513
Case5



min_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-11T10:58:40Z
Start Date (ms): 0 End Date (ms): 903520000 Duration (ms): 903520000 Window Duration (ms): 903520
Calculated window duration: 903520ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "stockdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-11T10:58:40Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v9" or r["_field"] == "v5" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v9), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v8), y: 2.0) + math.pow(x: float(v: r.v10), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 903520ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 903520ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 903520ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 903520ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 180891.97 ms, called 2 times
Total time for totaltime: 180897.41 ms, called 1 times
experiment: IFX-F ; table: stockdata ; interacttype:  ; columns: 9,5,1,2,3,4,6,7,8,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 180.897 ; sqltime: 180.892
Case5



min_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "stockdata")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "stockdata")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-11T10:58:40Z
Start Date (ms): 0 End Date (ms): 903520000 Duration (ms): 903520000 Window Duration (ms): 752933
Calculated window duration: 752933ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "stockdata")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-11T10:58:40Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v9" or r["_field"] == "v5" or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v9), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v8), y: 2.0) + math.pow(x: float(v: r.v10), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 752933ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 752933ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 752933ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 752933ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 177837.15 ms, called 2 times
Total time for totaltime: 177842.53 ms, called 1 times
experiment: IFX-F ; table: stockdata ; interacttype:  ; columns: 9,5,1,2,3,4,6,7,8,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 177.843 ; sqltime: 177.837
Case5



min_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-10T23:18:39Z
Start Date (ms): 0 End Date (ms): 861519000 Duration (ms): 861519000 Window Duration (ms): 4307595
Calculated window duration: 4307595ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "traffic")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-10T23:18:39Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v9" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) + (float(v: 0.03)) * float(v: r.v6) + (float(v: 0.27)) * float(v: r.v7) + (float(v: 0.26)) * float(v: r.v8) + (float(v: 0.6)) * float(v: r.v9) + (float(v: 0.01)) * float(v: r.v10) }))
    

    
        pivoted
        |> aggregateWindow(every: 4307595ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 4307595ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 4307595ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 4307595ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 23415.32 ms, called 2 times
Total time for totaltime: 23416.84 ms, called 1 times
experiment: IFX-F ; table: traffic ; interacttype:  ; columns: 1,2,3,4,5,6,7,8,9,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 23.417 ; sqltime: 23.415
Case5



min_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-10T23:18:39Z
Start Date (ms): 0 End Date (ms): 861519000 Duration (ms): 861519000 Window Duration (ms): 2153797
Calculated window duration: 2153797ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "traffic")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-10T23:18:39Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v9" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) + (float(v: 0.03)) * float(v: r.v6) + (float(v: 0.27)) * float(v: r.v7) + (float(v: 0.26)) * float(v: r.v8) + (float(v: 0.6)) * float(v: r.v9) + (float(v: 0.01)) * float(v: r.v10) }))
    

    
        pivoted
        |> aggregateWindow(every: 2153797ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 2153797ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 2153797ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 2153797ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 24605.89 ms, called 2 times
Total time for totaltime: 24609.31 ms, called 1 times
experiment: IFX-F ; table: traffic ; interacttype:  ; columns: 1,2,3,4,5,6,7,8,9,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 24.609 ; sqltime: 24.606
Case5



min_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-10T23:18:39Z
Start Date (ms): 0 End Date (ms): 861519000 Duration (ms): 861519000 Window Duration (ms): 1435865
Calculated window duration: 1435865ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "traffic")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-10T23:18:39Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v9" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) + (float(v: 0.03)) * float(v: r.v6) + (float(v: 0.27)) * float(v: r.v7) + (float(v: 0.26)) * float(v: r.v8) + (float(v: 0.6)) * float(v: r.v9) + (float(v: 0.01)) * float(v: r.v10) }))
    

    
        pivoted
        |> aggregateWindow(every: 1435865ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1435865ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1435865ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1435865ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 24754.71 ms, called 2 times
Total time for totaltime: 24757.97 ms, called 1 times
experiment: IFX-F ; table: traffic ; interacttype:  ; columns: 1,2,3,4,5,6,7,8,9,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 24.758 ; sqltime: 24.755
Case5



min_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-10T23:18:39Z
Start Date (ms): 0 End Date (ms): 861519000 Duration (ms): 861519000 Window Duration (ms): 1076898
Calculated window duration: 1076898ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "traffic")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-10T23:18:39Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v9" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) + (float(v: 0.03)) * float(v: r.v6) + (float(v: 0.27)) * float(v: r.v7) + (float(v: 0.26)) * float(v: r.v8) + (float(v: 0.6)) * float(v: r.v9) + (float(v: 0.01)) * float(v: r.v10) }))
    

    
        pivoted
        |> aggregateWindow(every: 1076898ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1076898ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1076898ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1076898ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 22642.58 ms, called 2 times
Total time for totaltime: 22645.91 ms, called 1 times
experiment: IFX-F ; table: traffic ; interacttype:  ; columns: 1,2,3,4,5,6,7,8,9,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 22.646 ; sqltime: 22.643
Case5



min_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-10T23:18:39Z
Start Date (ms): 0 End Date (ms): 861519000 Duration (ms): 861519000 Window Duration (ms): 861519
Calculated window duration: 861519ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "traffic")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-10T23:18:39Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v9" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) + (float(v: 0.03)) * float(v: r.v6) + (float(v: 0.27)) * float(v: r.v7) + (float(v: 0.26)) * float(v: r.v8) + (float(v: 0.6)) * float(v: r.v9) + (float(v: 0.01)) * float(v: r.v10) }))
    

    
        pivoted
        |> aggregateWindow(every: 861519ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 861519ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 861519ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 861519ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 25465.14 ms, called 2 times
Total time for totaltime: 25469.08 ms, called 1 times
experiment: IFX-F ; table: traffic ; interacttype:  ; columns: 1,2,3,4,5,6,7,8,9,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 25.469 ; sqltime: 25.465
Case5



min_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-10T23:18:39Z
Start Date (ms): 0 End Date (ms): 861519000 Duration (ms): 861519000 Window Duration (ms): 717932
Calculated window duration: 717932ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "traffic")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-10T23:18:39Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v9" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) + (float(v: 0.03)) * float(v: r.v6) + (float(v: 0.27)) * float(v: r.v7) + (float(v: 0.26)) * float(v: r.v8) + (float(v: 0.6)) * float(v: r.v9) + (float(v: 0.01)) * float(v: r.v10) }))
    

    
        pivoted
        |> aggregateWindow(every: 717932ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 717932ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 717932ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 717932ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 24373.81 ms, called 2 times
Total time for totaltime: 24379.15 ms, called 1 times
experiment: IFX-F ; table: traffic ; interacttype:  ; columns: 1,2,3,4,5,6,7,8,9,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 24.379 ; sqltime: 24.374
Case5



min_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-10T23:18:39Z
Start Date (ms): 0 End Date (ms): 861519000 Duration (ms): 861519000 Window Duration (ms): 4307595
Calculated window duration: 4307595ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "traffic")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-10T23:18:39Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v9" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v8), y: 2.0) + math.pow(x: float(v: r.v9), y: 2.0) + math.pow(x: float(v: r.v10), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 4307595ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 4307595ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 4307595ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 4307595ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 172523.40 ms, called 2 times
Total time for totaltime: 172524.98 ms, called 1 times
experiment: IFX-F ; table: traffic ; interacttype:  ; columns: 1,2,3,4,5,6,7,8,9,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 172.525 ; sqltime: 172.523
Case5



min_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-10T23:18:39Z
Start Date (ms): 0 End Date (ms): 861519000 Duration (ms): 861519000 Window Duration (ms): 2153797
Calculated window duration: 2153797ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "traffic")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-10T23:18:39Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v9" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v8), y: 2.0) + math.pow(x: float(v: r.v9), y: 2.0) + math.pow(x: float(v: r.v10), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 2153797ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 2153797ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 2153797ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 2153797ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 175211.50 ms, called 2 times
Total time for totaltime: 175215.00 ms, called 1 times
experiment: IFX-F ; table: traffic ; interacttype:  ; columns: 1,2,3,4,5,6,7,8,9,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 175.215 ; sqltime: 175.212
Case5



min_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-10T23:18:39Z
Start Date (ms): 0 End Date (ms): 861519000 Duration (ms): 861519000 Window Duration (ms): 1435865
Calculated window duration: 1435865ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "traffic")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-10T23:18:39Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v9" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v8), y: 2.0) + math.pow(x: float(v: r.v9), y: 2.0) + math.pow(x: float(v: r.v10), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 1435865ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1435865ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1435865ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1435865ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 171229.88 ms, called 2 times
Total time for totaltime: 171232.80 ms, called 1 times
experiment: IFX-F ; table: traffic ; interacttype:  ; columns: 1,2,3,4,5,6,7,8,9,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 171.233 ; sqltime: 171.230
Case5



min_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-10T23:18:39Z
Start Date (ms): 0 End Date (ms): 861519000 Duration (ms): 861519000 Window Duration (ms): 1076898
Calculated window duration: 1076898ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "traffic")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-10T23:18:39Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v9" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v8), y: 2.0) + math.pow(x: float(v: r.v9), y: 2.0) + math.pow(x: float(v: r.v10), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 1076898ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1076898ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1076898ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1076898ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 170681.14 ms, called 2 times
Total time for totaltime: 170684.64 ms, called 1 times
experiment: IFX-F ; table: traffic ; interacttype:  ; columns: 1,2,3,4,5,6,7,8,9,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 170.685 ; sqltime: 170.681
Case5



min_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-10T23:18:39Z
Start Date (ms): 0 End Date (ms): 861519000 Duration (ms): 861519000 Window Duration (ms): 861519
Calculated window duration: 861519ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "traffic")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-10T23:18:39Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v9" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v8), y: 2.0) + math.pow(x: float(v: r.v9), y: 2.0) + math.pow(x: float(v: r.v10), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 861519ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 861519ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 861519ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 861519ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 170997.83 ms, called 2 times
Total time for totaltime: 171001.73 ms, called 1 times
experiment: IFX-F ; table: traffic ; interacttype:  ; columns: 1,2,3,4,5,6,7,8,9,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 171.002 ; sqltime: 170.998
Case5



min_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "traffic")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "traffic")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-10T23:18:39Z
Start Date (ms): 0 End Date (ms): 861519000 Duration (ms): 861519000 Window Duration (ms): 717932
Calculated window duration: 717932ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "traffic")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-10T23:18:39Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" or r["_field"] == "v6" or r["_field"] == "v7" or r["_field"] == "v8" or r["_field"] == "v9" or r["_field"] == "v10" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0) + math.pow(x: float(v: r.v6), y: 2.0) + math.pow(x: float(v: r.v7), y: 2.0) + math.pow(x: float(v: r.v8), y: 2.0) + math.pow(x: float(v: r.v9), y: 2.0) + math.pow(x: float(v: r.v10), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 717932ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 717932ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 717932ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 717932ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 176615.70 ms, called 2 times
Total time for totaltime: 176621.96 ms, called 1 times
experiment: IFX-F ; table: traffic ; interacttype:  ; columns: 1,2,3,4,5,6,7,8,9,10 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 176.622 ; sqltime: 176.616
Case5



min_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-13T04:12:00Z
Start Date (ms): 0 End Date (ms): 1051920000 Duration (ms): 1051920000 Window Duration (ms): 5259600
Calculated window duration: 5259600ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_1m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-13T04:12:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 18444.67 ms, called 2 times
Total time for totaltime: 18446.54 ms, called 1 times
experiment: IFX-F ; table: synthetic1m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 18.447 ; sqltime: 18.445
Case5



min_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-13T04:12:00Z
Start Date (ms): 0 End Date (ms): 1051920000 Duration (ms): 1051920000 Window Duration (ms): 2629800
Calculated window duration: 2629800ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_1m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-13T04:12:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 20057.14 ms, called 2 times
Total time for totaltime: 20059.94 ms, called 1 times
experiment: IFX-F ; table: synthetic1m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 20.060 ; sqltime: 20.057
Case5



min_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-13T04:12:00Z
Start Date (ms): 0 End Date (ms): 1051920000 Duration (ms): 1051920000 Window Duration (ms): 1753200
Calculated window duration: 1753200ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_1m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-13T04:12:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 18683.24 ms, called 2 times
Total time for totaltime: 18687.09 ms, called 1 times
experiment: IFX-F ; table: synthetic1m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 18.687 ; sqltime: 18.683
Case5



min_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-13T04:12:00Z
Start Date (ms): 0 End Date (ms): 1051920000 Duration (ms): 1051920000 Window Duration (ms): 1314900
Calculated window duration: 1314900ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_1m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-13T04:12:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 1314900ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1314900ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1314900ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1314900ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 19445.23 ms, called 2 times
Total time for totaltime: 19448.26 ms, called 1 times
experiment: IFX-F ; table: synthetic1m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 19.448 ; sqltime: 19.445
Case5



min_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-13T04:12:00Z
Start Date (ms): 0 End Date (ms): 1051920000 Duration (ms): 1051920000 Window Duration (ms): 1051920
Calculated window duration: 1051920ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_1m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-13T04:12:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 1051920ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1051920ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1051920ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1051920ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 18466.41 ms, called 2 times
Total time for totaltime: 18469.92 ms, called 1 times
experiment: IFX-F ; table: synthetic1m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 18.470 ; sqltime: 18.466
Case5



min_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-13T04:12:00Z
Start Date (ms): 0 End Date (ms): 1051920000 Duration (ms): 1051920000 Window Duration (ms): 876600
Calculated window duration: 876600ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_1m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-13T04:12:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 876600ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 876600ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 876600ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 876600ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 19753.98 ms, called 2 times
Total time for totaltime: 19757.95 ms, called 1 times
experiment: IFX-F ; table: synthetic1m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 19.758 ; sqltime: 19.754
Case5



min_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-13T04:12:00Z
Start Date (ms): 0 End Date (ms): 1051920000 Duration (ms): 1051920000 Window Duration (ms): 5259600
Calculated window duration: 5259600ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_1m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-13T04:12:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 128073.22 ms, called 2 times
Total time for totaltime: 128074.97 ms, called 1 times
experiment: IFX-F ; table: synthetic1m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 128.075 ; sqltime: 128.073
Case5



min_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-13T04:12:00Z
Start Date (ms): 0 End Date (ms): 1051920000 Duration (ms): 1051920000 Window Duration (ms): 2629800
Calculated window duration: 2629800ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_1m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-13T04:12:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 125793.50 ms, called 2 times
Total time for totaltime: 125795.52 ms, called 1 times
experiment: IFX-F ; table: synthetic1m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 125.796 ; sqltime: 125.794
Case5



min_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-13T04:12:00Z
Start Date (ms): 0 End Date (ms): 1051920000 Duration (ms): 1051920000 Window Duration (ms): 1753200
Calculated window duration: 1753200ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_1m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-13T04:12:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 126342.47 ms, called 2 times
Total time for totaltime: 126345.17 ms, called 1 times
experiment: IFX-F ; table: synthetic1m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 126.345 ; sqltime: 126.342
Case5



min_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-13T04:12:00Z
Start Date (ms): 0 End Date (ms): 1051920000 Duration (ms): 1051920000 Window Duration (ms): 1314900
Calculated window duration: 1314900ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_1m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-13T04:12:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 1314900ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1314900ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1314900ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1314900ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 126151.72 ms, called 2 times
Total time for totaltime: 126154.46 ms, called 1 times
experiment: IFX-F ; table: synthetic1m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 126.154 ; sqltime: 126.152
Case5



min_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-13T04:12:00Z
Start Date (ms): 0 End Date (ms): 1051920000 Duration (ms): 1051920000 Window Duration (ms): 1051920
Calculated window duration: 1051920ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_1m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-13T04:12:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 1051920ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1051920ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1051920ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1051920ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 126112.47 ms, called 2 times
Total time for totaltime: 126116.27 ms, called 1 times
experiment: IFX-F ; table: synthetic1m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 126.116 ; sqltime: 126.112
Case5



min_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_1m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_1m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-13T04:12:00Z
Start Date (ms): 0 End Date (ms): 1051920000 Duration (ms): 1051920000 Window Duration (ms): 876600
Calculated window duration: 876600ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_1m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-13T04:12:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 876600ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 876600ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 876600ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 876600ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 128043.23 ms, called 2 times
Total time for totaltime: 128047.14 ms, called 1 times
experiment: IFX-F ; table: synthetic1m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 128.047 ; sqltime: 128.043
Case5



min_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-25T08:24:00Z
Start Date (ms): 0 End Date (ms): 2103840000 Duration (ms): 2103840000 Window Duration (ms): 10519200
Calculated window duration: 10519200ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_2m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-25T08:24:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 10519200ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 10519200ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 10519200ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 10519200ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 34988.29 ms, called 2 times
Total time for totaltime: 34989.68 ms, called 1 times
experiment: IFX-F ; table: synthetic2m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 34.990 ; sqltime: 34.988
Case5



min_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-25T08:24:00Z
Start Date (ms): 0 End Date (ms): 2103840000 Duration (ms): 2103840000 Window Duration (ms): 5259600
Calculated window duration: 5259600ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_2m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-25T08:24:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 38092.96 ms, called 2 times
Total time for totaltime: 38094.45 ms, called 1 times
experiment: IFX-F ; table: synthetic2m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 38.094 ; sqltime: 38.093
Case5



min_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-25T08:24:00Z
Start Date (ms): 0 End Date (ms): 2103840000 Duration (ms): 2103840000 Window Duration (ms): 3506400
Calculated window duration: 3506400ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_2m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-25T08:24:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 3506400ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 3506400ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 3506400ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 3506400ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 36025.94 ms, called 2 times
Total time for totaltime: 36027.74 ms, called 1 times
experiment: IFX-F ; table: synthetic2m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 36.028 ; sqltime: 36.026
Case5



min_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-25T08:24:00Z
Start Date (ms): 0 End Date (ms): 2103840000 Duration (ms): 2103840000 Window Duration (ms): 2629800
Calculated window duration: 2629800ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_2m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-25T08:24:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 36664.91 ms, called 2 times
Total time for totaltime: 36667.60 ms, called 1 times
experiment: IFX-F ; table: synthetic2m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 36.668 ; sqltime: 36.665
Case5



min_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-25T08:24:00Z
Start Date (ms): 0 End Date (ms): 2103840000 Duration (ms): 2103840000 Window Duration (ms): 2103840
Calculated window duration: 2103840ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_2m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-25T08:24:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 2103840ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 2103840ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 2103840ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 2103840ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 36673.34 ms, called 2 times
Total time for totaltime: 36675.49 ms, called 1 times
experiment: IFX-F ; table: synthetic2m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 36.675 ; sqltime: 36.673
Case5



min_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-25T08:24:00Z
Start Date (ms): 0 End Date (ms): 2103840000 Duration (ms): 2103840000 Window Duration (ms): 1753200
Calculated window duration: 1753200ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_2m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-25T08:24:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 36194.60 ms, called 2 times
Total time for totaltime: 36198.02 ms, called 1 times
experiment: IFX-F ; table: synthetic2m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 36.198 ; sqltime: 36.195
Case5



min_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-25T08:24:00Z
Start Date (ms): 0 End Date (ms): 2103840000 Duration (ms): 2103840000 Window Duration (ms): 10519200
Calculated window duration: 10519200ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_2m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-25T08:24:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 10519200ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 10519200ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 10519200ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 10519200ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 236093.22 ms, called 2 times
Total time for totaltime: 236094.52 ms, called 1 times
experiment: IFX-F ; table: synthetic2m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 236.095 ; sqltime: 236.093
Case5



min_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-25T08:24:00Z
Start Date (ms): 0 End Date (ms): 2103840000 Duration (ms): 2103840000 Window Duration (ms): 5259600
Calculated window duration: 5259600ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_2m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-25T08:24:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 5259600ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 245772.25 ms, called 2 times
Total time for totaltime: 245773.70 ms, called 1 times
experiment: IFX-F ; table: synthetic2m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 245.774 ; sqltime: 245.772
Case5



min_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-25T08:24:00Z
Start Date (ms): 0 End Date (ms): 2103840000 Duration (ms): 2103840000 Window Duration (ms): 3506400
Calculated window duration: 3506400ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_2m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-25T08:24:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 3506400ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 3506400ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 3506400ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 3506400ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 239877.76 ms, called 2 times
Total time for totaltime: 239880.70 ms, called 1 times
experiment: IFX-F ; table: synthetic2m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 239.881 ; sqltime: 239.878
Case5



min_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-25T08:24:00Z
Start Date (ms): 0 End Date (ms): 2103840000 Duration (ms): 2103840000 Window Duration (ms): 2629800
Calculated window duration: 2629800ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_2m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-25T08:24:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 2629800ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 239414.24 ms, called 2 times
Total time for totaltime: 239416.04 ms, called 1 times
experiment: IFX-F ; table: synthetic2m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 239.416 ; sqltime: 239.414
Case5



min_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-25T08:24:00Z
Start Date (ms): 0 End Date (ms): 2103840000 Duration (ms): 2103840000 Window Duration (ms): 2103840
Calculated window duration: 2103840ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_2m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-25T08:24:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 2103840ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 2103840ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 2103840ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 2103840ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 240045.73 ms, called 2 times
Total time for totaltime: 240047.78 ms, called 1 times
experiment: IFX-F ; table: synthetic2m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 240.048 ; sqltime: 240.046
Case5



min_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_2m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_2m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-01-25T08:24:00Z
Start Date (ms): 0 End Date (ms): 2103840000 Duration (ms): 2103840000 Window Duration (ms): 1753200
Calculated window duration: 1753200ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_2m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-01-25T08:24:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 1753200ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 242014.33 ms, called 2 times
Total time for totaltime: 242016.90 ms, called 1 times
experiment: IFX-F ; table: synthetic2m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 242.017 ; sqltime: 242.014
Case5



min_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-02-15T15:45:00Z
Start Date (ms): 0 End Date (ms): 3944700000 Duration (ms): 3944700000 Window Duration (ms): 19723500
Calculated window duration: 19723500ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_4m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-02-15T15:45:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 64892.66 ms, called 2 times
Total time for totaltime: 64895.95 ms, called 1 times
experiment: IFX-F ; table: synthetic4m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 64.896 ; sqltime: 64.893
Case5



min_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-02-15T15:45:00Z
Start Date (ms): 0 End Date (ms): 3944700000 Duration (ms): 3944700000 Window Duration (ms): 9861750
Calculated window duration: 9861750ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_4m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-02-15T15:45:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 66100.55 ms, called 2 times
Total time for totaltime: 66102.08 ms, called 1 times
experiment: IFX-F ; table: synthetic4m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 66.102 ; sqltime: 66.101
Case5



min_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-02-15T15:45:00Z
Start Date (ms): 0 End Date (ms): 3944700000 Duration (ms): 3944700000 Window Duration (ms): 6574500
Calculated window duration: 6574500ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_4m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-02-15T15:45:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 62161.72 ms, called 2 times
Total time for totaltime: 62165.14 ms, called 1 times
experiment: IFX-F ; table: synthetic4m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 62.165 ; sqltime: 62.162
Case5



min_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-02-15T15:45:00Z
Start Date (ms): 0 End Date (ms): 3944700000 Duration (ms): 3944700000 Window Duration (ms): 4930875
Calculated window duration: 4930875ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_4m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-02-15T15:45:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 4930875ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 4930875ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 4930875ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 4930875ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 64256.35 ms, called 2 times
Total time for totaltime: 64258.82 ms, called 1 times
experiment: IFX-F ; table: synthetic4m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 64.259 ; sqltime: 64.256
Case5



min_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-02-15T15:45:00Z
Start Date (ms): 0 End Date (ms): 3944700000 Duration (ms): 3944700000 Window Duration (ms): 3944700
Calculated window duration: 3944700ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_4m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-02-15T15:45:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 3944700ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 3944700ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 3944700ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 3944700ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 64626.12 ms, called 2 times
Total time for totaltime: 64628.30 ms, called 1 times
experiment: IFX-F ; table: synthetic4m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 64.628 ; sqltime: 64.626
Case5



min_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-02-15T15:45:00Z
Start Date (ms): 0 End Date (ms): 3944700000 Duration (ms): 3944700000 Window Duration (ms): 3287250
Calculated window duration: 3287250ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_4m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-02-15T15:45:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 3287250ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 3287250ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 3287250ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 3287250ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 68344.35 ms, called 2 times
Total time for totaltime: 68348.28 ms, called 1 times
experiment: IFX-F ; table: synthetic4m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 68.348 ; sqltime: 68.344
Case5



min_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-02-15T15:45:00Z
Start Date (ms): 0 End Date (ms): 3944700000 Duration (ms): 3944700000 Window Duration (ms): 19723500
Calculated window duration: 19723500ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_4m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-02-15T15:45:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 385960.00 ms, called 2 times
Total time for totaltime: 385961.25 ms, called 1 times
experiment: IFX-F ; table: synthetic4m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 385.961 ; sqltime: 385.960
Case5



min_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-02-15T15:45:00Z
Start Date (ms): 0 End Date (ms): 3944700000 Duration (ms): 3944700000 Window Duration (ms): 9861750
Calculated window duration: 9861750ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_4m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-02-15T15:45:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 397714.82 ms, called 2 times
Total time for totaltime: 397716.29 ms, called 1 times
experiment: IFX-F ; table: synthetic4m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 397.716 ; sqltime: 397.715
Case5



min_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-02-15T15:45:00Z
Start Date (ms): 0 End Date (ms): 3944700000 Duration (ms): 3944700000 Window Duration (ms): 6574500
Calculated window duration: 6574500ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_4m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-02-15T15:45:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 397091.50 ms, called 2 times
Total time for totaltime: 397094.59 ms, called 1 times
experiment: IFX-F ; table: synthetic4m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 397.095 ; sqltime: 397.091
Case5



min_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-02-15T15:45:00Z
Start Date (ms): 0 End Date (ms): 3944700000 Duration (ms): 3944700000 Window Duration (ms): 4930875
Calculated window duration: 4930875ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_4m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-02-15T15:45:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 4930875ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 4930875ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 4930875ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 4930875ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 394250.51 ms, called 2 times
Total time for totaltime: 394253.09 ms, called 1 times
experiment: IFX-F ; table: synthetic4m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 394.253 ; sqltime: 394.251
Case5



min_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-02-15T15:45:00Z
Start Date (ms): 0 End Date (ms): 3944700000 Duration (ms): 3944700000 Window Duration (ms): 3944700
Calculated window duration: 3944700ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_4m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-02-15T15:45:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 3944700ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 3944700ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 3944700ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 3944700ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 407857.81 ms, called 2 times
Total time for totaltime: 407860.00 ms, called 1 times
experiment: IFX-F ; table: synthetic4m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 407.860 ; sqltime: 407.858
Case5



min_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_4m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_4m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-02-15T15:45:00Z
Start Date (ms): 0 End Date (ms): 3944700000 Duration (ms): 3944700000 Window Duration (ms): 3287250
Calculated window duration: 3287250ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_4m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-02-15T15:45:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 3287250ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 3287250ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 3287250ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 3287250ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 397183.68 ms, called 2 times
Total time for totaltime: 397186.22 ms, called 1 times
experiment: IFX-F ; table: synthetic4m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 397.186 ; sqltime: 397.184
Case5



min_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-04-02T07:30:00Z
Start Date (ms): 0 End Date (ms): 7889400000 Duration (ms): 7889400000 Window Duration (ms): 39447000
Calculated window duration: 39447000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_8m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-04-02T07:30:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 114121.71 ms, called 2 times
Total time for totaltime: 114125.07 ms, called 1 times
experiment: IFX-F ; table: synthetic8m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 114.125 ; sqltime: 114.122
Case5



min_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-04-02T07:30:00Z
Start Date (ms): 0 End Date (ms): 7889400000 Duration (ms): 7889400000 Window Duration (ms): 19723500
Calculated window duration: 19723500ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_8m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-04-02T07:30:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 116081.50 ms, called 2 times
Total time for totaltime: 116082.81 ms, called 1 times
experiment: IFX-F ; table: synthetic8m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 116.083 ; sqltime: 116.082
Case5



min_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-04-02T07:30:00Z
Start Date (ms): 0 End Date (ms): 7889400000 Duration (ms): 7889400000 Window Duration (ms): 13149000
Calculated window duration: 13149000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_8m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-04-02T07:30:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 117940.55 ms, called 2 times
Total time for totaltime: 117942.13 ms, called 1 times
experiment: IFX-F ; table: synthetic8m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 117.942 ; sqltime: 117.941
Case5



min_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-04-02T07:30:00Z
Start Date (ms): 0 End Date (ms): 7889400000 Duration (ms): 7889400000 Window Duration (ms): 9861750
Calculated window duration: 9861750ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_8m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-04-02T07:30:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 119009.80 ms, called 2 times
Total time for totaltime: 119011.71 ms, called 1 times
experiment: IFX-F ; table: synthetic8m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 119.012 ; sqltime: 119.010
Case5



min_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-04-02T07:30:00Z
Start Date (ms): 0 End Date (ms): 7889400000 Duration (ms): 7889400000 Window Duration (ms): 7889400
Calculated window duration: 7889400ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_8m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-04-02T07:30:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 7889400ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 7889400ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 7889400ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 7889400ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 125418.65 ms, called 2 times
Total time for totaltime: 125420.81 ms, called 1 times
experiment: IFX-F ; table: synthetic8m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 125.421 ; sqltime: 125.419
Case5



min_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-04-02T07:30:00Z
Start Date (ms): 0 End Date (ms): 7889400000 Duration (ms): 7889400000 Window Duration (ms): 6574500
Calculated window duration: 6574500ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_8m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-04-02T07:30:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 116719.81 ms, called 2 times
Total time for totaltime: 116723.52 ms, called 1 times
experiment: IFX-F ; table: synthetic8m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 116.724 ; sqltime: 116.720
Case5



min_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-04-02T07:30:00Z
Start Date (ms): 0 End Date (ms): 7889400000 Duration (ms): 7889400000 Window Duration (ms): 39447000
Calculated window duration: 39447000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_8m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-04-02T07:30:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 690625.54 ms, called 2 times
Total time for totaltime: 690626.54 ms, called 1 times
experiment: IFX-F ; table: synthetic8m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 690.627 ; sqltime: 690.626
Case5



min_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-04-02T07:30:00Z
Start Date (ms): 0 End Date (ms): 7889400000 Duration (ms): 7889400000 Window Duration (ms): 19723500
Calculated window duration: 19723500ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_8m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-04-02T07:30:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 662600.93 ms, called 2 times
Total time for totaltime: 662602.58 ms, called 1 times
experiment: IFX-F ; table: synthetic8m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 662.603 ; sqltime: 662.601
Case5



min_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-04-02T07:30:00Z
Start Date (ms): 0 End Date (ms): 7889400000 Duration (ms): 7889400000 Window Duration (ms): 13149000
Calculated window duration: 13149000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_8m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-04-02T07:30:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 691449.87 ms, called 2 times
Total time for totaltime: 691451.84 ms, called 1 times
experiment: IFX-F ; table: synthetic8m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 691.452 ; sqltime: 691.450
Case5



min_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-04-02T07:30:00Z
Start Date (ms): 0 End Date (ms): 7889400000 Duration (ms): 7889400000 Window Duration (ms): 9861750
Calculated window duration: 9861750ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_8m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-04-02T07:30:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 9861750ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 670992.13 ms, called 2 times
Total time for totaltime: 670995.70 ms, called 1 times
experiment: IFX-F ; table: synthetic8m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 670.996 ; sqltime: 670.992
Case5



min_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-04-02T07:30:00Z
Start Date (ms): 0 End Date (ms): 7889400000 Duration (ms): 7889400000 Window Duration (ms): 7889400
Calculated window duration: 7889400ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_8m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-04-02T07:30:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 7889400ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 7889400ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 7889400ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 7889400ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 679310.53 ms, called 2 times
Total time for totaltime: 679313.79 ms, called 1 times
experiment: IFX-F ; table: synthetic8m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 679.314 ; sqltime: 679.311
Case5



min_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_8m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_8m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-04-02T07:30:00Z
Start Date (ms): 0 End Date (ms): 7889400000 Duration (ms): 7889400000 Window Duration (ms): 6574500
Calculated window duration: 6574500ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_8m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-04-02T07:30:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 6574500ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 680634.35 ms, called 2 times
Total time for totaltime: 680638.37 ms, called 1 times
experiment: IFX-F ; table: synthetic8m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 680.638 ; sqltime: 680.634
Case5



min_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-07-02T15:00:00Z
Start Date (ms): 0 End Date (ms): 15778800000 Duration (ms): 15778800000 Window Duration (ms): 78894000
Calculated window duration: 78894000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_16m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-07-02T15:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 219475.86 ms, called 2 times
Total time for totaltime: 219479.09 ms, called 1 times
experiment: IFX-F ; table: synthetic16m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 219.479 ; sqltime: 219.476
Case5



min_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-07-02T15:00:00Z
Start Date (ms): 0 End Date (ms): 15778800000 Duration (ms): 15778800000 Window Duration (ms): 39447000
Calculated window duration: 39447000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_16m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-07-02T15:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 219641.44 ms, called 2 times
Total time for totaltime: 219642.88 ms, called 1 times
experiment: IFX-F ; table: synthetic16m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 219.643 ; sqltime: 219.641
Case5



min_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-07-02T15:00:00Z
Start Date (ms): 0 End Date (ms): 15778800000 Duration (ms): 15778800000 Window Duration (ms): 26298000
Calculated window duration: 26298000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_16m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-07-02T15:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 212195.55 ms, called 2 times
Total time for totaltime: 212199.04 ms, called 1 times
experiment: IFX-F ; table: synthetic16m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 212.199 ; sqltime: 212.196
Case5



min_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-07-02T15:00:00Z
Start Date (ms): 0 End Date (ms): 15778800000 Duration (ms): 15778800000 Window Duration (ms): 19723500
Calculated window duration: 19723500ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_16m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-07-02T15:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 216618.12 ms, called 2 times
Total time for totaltime: 216619.82 ms, called 1 times
experiment: IFX-F ; table: synthetic16m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 216.620 ; sqltime: 216.618
Case5



min_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-07-02T15:00:00Z
Start Date (ms): 0 End Date (ms): 15778800000 Duration (ms): 15778800000 Window Duration (ms): 15778800
Calculated window duration: 15778800ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_16m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-07-02T15:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 15778800ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 15778800ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 15778800ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 15778800ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 231591.20 ms, called 2 times
Total time for totaltime: 231593.47 ms, called 1 times
experiment: IFX-F ; table: synthetic16m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 231.593 ; sqltime: 231.591
Case5



min_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-07-02T15:00:00Z
Start Date (ms): 0 End Date (ms): 15778800000 Duration (ms): 15778800000 Window Duration (ms): 13149000
Calculated window duration: 13149000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_16m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-07-02T15:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 218251.99 ms, called 2 times
Total time for totaltime: 218255.35 ms, called 1 times
experiment: IFX-F ; table: synthetic16m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 218.255 ; sqltime: 218.252
Case5



min_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-07-02T15:00:00Z
Start Date (ms): 0 End Date (ms): 15778800000 Duration (ms): 15778800000 Window Duration (ms): 78894000
Calculated window duration: 78894000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_16m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-07-02T15:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 1198024.01 ms, called 2 times
Total time for totaltime: 1198025.44 ms, called 1 times
experiment: IFX-F ; table: synthetic16m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 1198.025 ; sqltime: 1198.024
Case5



min_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-07-02T15:00:00Z
Start Date (ms): 0 End Date (ms): 15778800000 Duration (ms): 15778800000 Window Duration (ms): 39447000
Calculated window duration: 39447000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_16m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-07-02T15:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 1198850.36 ms, called 2 times
Total time for totaltime: 1198851.99 ms, called 1 times
experiment: IFX-F ; table: synthetic16m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 1198.852 ; sqltime: 1198.850
Case5



min_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-07-02T15:00:00Z
Start Date (ms): 0 End Date (ms): 15778800000 Duration (ms): 15778800000 Window Duration (ms): 26298000
Calculated window duration: 26298000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_16m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-07-02T15:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 1206431.97 ms, called 2 times
Total time for totaltime: 1206435.54 ms, called 1 times
experiment: IFX-F ; table: synthetic16m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 1206.436 ; sqltime: 1206.432
Case5



min_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-07-02T15:00:00Z
Start Date (ms): 0 End Date (ms): 15778800000 Duration (ms): 15778800000 Window Duration (ms): 19723500
Calculated window duration: 19723500ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_16m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-07-02T15:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 19723500ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 1192767.82 ms, called 2 times
Total time for totaltime: 1192769.54 ms, called 1 times
experiment: IFX-F ; table: synthetic16m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 1192.770 ; sqltime: 1192.768
Case5



min_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-07-02T15:00:00Z
Start Date (ms): 0 End Date (ms): 15778800000 Duration (ms): 15778800000 Window Duration (ms): 15778800
Calculated window duration: 15778800ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_16m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-07-02T15:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 15778800ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 15778800ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 15778800ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 15778800ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 1183056.42 ms, called 2 times
Total time for totaltime: 1183059.75 ms, called 1 times
experiment: IFX-F ; table: synthetic16m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 1183.060 ; sqltime: 1183.056
Case5



min_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_16m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_16m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1970-07-02T15:00:00Z
Start Date (ms): 0 End Date (ms): 15778800000 Duration (ms): 15778800000 Window Duration (ms): 13149000
Calculated window duration: 13149000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_16m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1970-07-02T15:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 13149000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 1201139.97 ms, called 2 times
Total time for totaltime: 1201142.42 ms, called 1 times
experiment: IFX-F ; table: synthetic16m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 1201.142 ; sqltime: 1201.140
Case5



min_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-01T06:00:00Z
Start Date (ms): 0 End Date (ms): 31557600000 Duration (ms): 31557600000 Window Duration (ms): 157788000
Calculated window duration: 157788000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_32m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-01T06:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 409995.30 ms, called 2 times
Total time for totaltime: 409996.81 ms, called 1 times
experiment: IFX-F ; table: synthetic32m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 409.997 ; sqltime: 409.995
Case5



min_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-01T06:00:00Z
Start Date (ms): 0 End Date (ms): 31557600000 Duration (ms): 31557600000 Window Duration (ms): 78894000
Calculated window duration: 78894000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_32m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-01T06:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 420663.80 ms, called 2 times
Total time for totaltime: 420665.27 ms, called 1 times
experiment: IFX-F ; table: synthetic32m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 420.665 ; sqltime: 420.664
Case5



min_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-01T06:00:00Z
Start Date (ms): 0 End Date (ms): 31557600000 Duration (ms): 31557600000 Window Duration (ms): 52596000
Calculated window duration: 52596000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_32m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-01T06:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 52596000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 52596000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 52596000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 52596000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 429016.32 ms, called 2 times
Total time for totaltime: 429019.63 ms, called 1 times
experiment: IFX-F ; table: synthetic32m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 429.020 ; sqltime: 429.016
Case5



min_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-01T06:00:00Z
Start Date (ms): 0 End Date (ms): 31557600000 Duration (ms): 31557600000 Window Duration (ms): 39447000
Calculated window duration: 39447000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_32m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-01T06:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 413377.23 ms, called 2 times
Total time for totaltime: 413378.93 ms, called 1 times
experiment: IFX-F ; table: synthetic32m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 413.379 ; sqltime: 413.377
Case5



min_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-01T06:00:00Z
Start Date (ms): 0 End Date (ms): 31557600000 Duration (ms): 31557600000 Window Duration (ms): 31557600
Calculated window duration: 31557600ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_32m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-01T06:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 31557600ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 31557600ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 31557600ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 31557600ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 432666.13 ms, called 2 times
Total time for totaltime: 432668.27 ms, called 1 times
experiment: IFX-F ; table: synthetic32m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 432.668 ; sqltime: 432.666
Case5



min_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-01T06:00:00Z
Start Date (ms): 0 End Date (ms): 31557600000 Duration (ms): 31557600000 Window Duration (ms): 26298000
Calculated window duration: 26298000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_32m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-01T06:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 430945.73 ms, called 2 times
Total time for totaltime: 430949.53 ms, called 1 times
experiment: IFX-F ; table: synthetic32m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 430.950 ; sqltime: 430.946
Case5



min_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-01T06:00:00Z
Start Date (ms): 0 End Date (ms): 31557600000 Duration (ms): 31557600000 Window Duration (ms): 157788000
Calculated window duration: 157788000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_32m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-01T06:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 2394396.46 ms, called 2 times
Total time for totaltime: 2394397.56 ms, called 1 times
experiment: IFX-F ; table: synthetic32m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 2394.398 ; sqltime: 2394.396
Case5



min_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-01T06:00:00Z
Start Date (ms): 0 End Date (ms): 31557600000 Duration (ms): 31557600000 Window Duration (ms): 78894000
Calculated window duration: 78894000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_32m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-01T06:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 2299349.51 ms, called 2 times
Total time for totaltime: 2299351.77 ms, called 1 times
experiment: IFX-F ; table: synthetic32m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 2299.352 ; sqltime: 2299.350
Case5



min_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-01T06:00:00Z
Start Date (ms): 0 End Date (ms): 31557600000 Duration (ms): 31557600000 Window Duration (ms): 52596000
Calculated window duration: 52596000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_32m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-01T06:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 52596000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 52596000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 52596000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 52596000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 2258035.34 ms, called 2 times
Total time for totaltime: 2258037.20 ms, called 1 times
experiment: IFX-F ; table: synthetic32m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 2258.037 ; sqltime: 2258.035
Case5



min_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-01T06:00:00Z
Start Date (ms): 0 End Date (ms): 31557600000 Duration (ms): 31557600000 Window Duration (ms): 39447000
Calculated window duration: 39447000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_32m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-01T06:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 39447000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 2304352.26 ms, called 2 times
Total time for totaltime: 2304354.55 ms, called 1 times
experiment: IFX-F ; table: synthetic32m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 2304.355 ; sqltime: 2304.352
Case5



min_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-01T06:00:00Z
Start Date (ms): 0 End Date (ms): 31557600000 Duration (ms): 31557600000 Window Duration (ms): 31557600
Calculated window duration: 31557600ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_32m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-01T06:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 31557600ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 31557600ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 31557600ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 31557600ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 2270577.83 ms, called 2 times
Total time for totaltime: 2270579.86 ms, called 1 times
experiment: IFX-F ; table: synthetic32m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 2270.580 ; sqltime: 2270.578
Case5



min_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_32m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_32m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1971-01-01T06:00:00Z
Start Date (ms): 0 End Date (ms): 31557600000 Duration (ms): 31557600000 Window Duration (ms): 26298000
Calculated window duration: 26298000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_32m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1971-01-01T06:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 26298000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 2246982.88 ms, called 2 times
Total time for totaltime: 2246985.03 ms, called 1 times
experiment: IFX-F ; table: synthetic32m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 2246.985 ; sqltime: 2246.983
Case5



min_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1972-01-01T12:00:00Z
Start Date (ms): 0 End Date (ms): 63115200000 Duration (ms): 63115200000 Window Duration (ms): 315576000
Calculated window duration: 315576000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_64m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1972-01-01T12:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 315576000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 315576000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 315576000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 315576000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 800623.83 ms, called 2 times
Total time for totaltime: 800624.81 ms, called 1 times
experiment: IFX-F ; table: synthetic64m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 800.625 ; sqltime: 800.624
Case5



min_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1972-01-01T12:00:00Z
Start Date (ms): 0 End Date (ms): 63115200000 Duration (ms): 63115200000 Window Duration (ms): 157788000
Calculated window duration: 157788000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_64m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1972-01-01T12:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 795776.75 ms, called 2 times
Total time for totaltime: 795777.98 ms, called 1 times
experiment: IFX-F ; table: synthetic64m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 795.778 ; sqltime: 795.777
Case5



min_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1972-01-01T12:00:00Z
Start Date (ms): 0 End Date (ms): 63115200000 Duration (ms): 63115200000 Window Duration (ms): 105192000
Calculated window duration: 105192000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_64m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1972-01-01T12:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 105192000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 105192000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 105192000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 105192000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 818275.07 ms, called 2 times
Total time for totaltime: 818277.02 ms, called 1 times
experiment: IFX-F ; table: synthetic64m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 600 ; startTime: 0 ; endTime: -1 ; totaltime: 818.277 ; sqltime: 818.275
Case5



min_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1972-01-01T12:00:00Z
Start Date (ms): 0 End Date (ms): 63115200000 Duration (ms): 63115200000 Window Duration (ms): 78894000
Calculated window duration: 78894000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_64m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1972-01-01T12:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 78894000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 837180.06 ms, called 2 times
Total time for totaltime: 837184.22 ms, called 1 times
experiment: IFX-F ; table: synthetic64m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 800 ; startTime: 0 ; endTime: -1 ; totaltime: 837.184 ; sqltime: 837.180
Case5



min_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1972-01-01T12:00:00Z
Start Date (ms): 0 End Date (ms): 63115200000 Duration (ms): 63115200000 Window Duration (ms): 63115200
Calculated window duration: 63115200ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_64m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1972-01-01T12:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 63115200ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 63115200ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 63115200ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 63115200ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 816921.12 ms, called 2 times
Total time for totaltime: 816925.00 ms, called 1 times
experiment: IFX-F ; table: synthetic64m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1000 ; startTime: 0 ; endTime: -1 ; totaltime: 816.925 ; sqltime: 816.921
Case5



min_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1972-01-01T12:00:00Z
Start Date (ms): 0 End Date (ms): 63115200000 Duration (ms): 63115200000 Window Duration (ms): 52596000
Calculated window duration: 52596000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_64m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1972-01-01T12:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: (float(v: 0.58)) * float(v: r.v1) + (float(v: 0.04)) * float(v: r.v2) + (float(v: 0.94)) * float(v: r.v3) + (float(v: 0.57)) * float(v: r.v4) + (float(v: 0.09)) * float(v: r.v5) }))
    

    
        pivoted
        |> aggregateWindow(every: 52596000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 52596000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 52596000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 52596000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 789418.38 ms, called 2 times
Total time for totaltime: 789420.62 ms, called 1 times
experiment: IFX-F ; table: synthetic64m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: weightsum ; width: 1200 ; startTime: 0 ; endTime: -1 ; totaltime: 789.421 ; sqltime: 789.418
Case5



min_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1972-01-01T12:00:00Z
Start Date (ms): 0 End Date (ms): 63115200000 Duration (ms): 63115200000 Window Duration (ms): 315576000
Calculated window duration: 315576000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_64m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1972-01-01T12:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 315576000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 315576000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 315576000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 315576000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 4570252.04 ms, called 2 times
Total time for totaltime: 4570253.02 ms, called 1 times
experiment: IFX-F ; table: synthetic64m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 200 ; startTime: 0 ; endTime: -1 ; totaltime: 4570.253 ; sqltime: 4570.252
Case5



min_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1972-01-01T12:00:00Z
Start Date (ms): 0 End Date (ms): 63115200000 Duration (ms): 63115200000 Window Duration (ms): 157788000
Calculated window duration: 157788000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_64m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1972-01-01T12:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 157788000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
Total time for SQL.query.time: 4558250.23 ms, called 2 times
Total time for totaltime: 4558251.37 ms, called 1 times
experiment: IFX-F ; table: synthetic64m ; interacttype:  ; columns: 1,2,3,4,5 ; memLimit: 0 ; errorBound: 0.1 ; symbolName: L2 ; width: 400 ; startTime: 0 ; endTime: -1 ; totaltime: 4558.251 ; sqltime: 4558.250
Case5



min_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> first()
  |> rename(columns: {_time: "min_time"})  // 重命名 _time 为 min_time
  |> keep(columns: ["min_time"])  // 只保留 min_time 字段

max_time = from(bucket: "synthetic_64m")
  |> range(start: 0)  // 查询所有数据（从 1970-01-01 00:00:00 UTC 起）
  |> filter(fn: (r) => r._measurement == "synthetic_64m")  // 过滤指定的 _measurement
  |> last()
  |> rename(columns: {_time: "max_time"})  // 重命名 _time 为 max_time
  |> keep(columns: ["max_time"])  // 只保留 max_time 字段

min_time
  |> yield(name: "min_time")
max_time
  |> yield(name: "max_time")

    
Start Time: 1970-01-01T00:00:00Z End Time: 1972-01-01T12:00:00Z
Start Date (ms): 0 End Date (ms): 63115200000 Duration (ms): 63115200000 Window Duration (ms): 105192000
Calculated window duration: 105192000ms
Constructed Flux Query:
import "math"

    pivoted = from(bucket: "synthetic_64m")
      |> range(start: 1970-01-01T00:00:00Z, stop: 1972-01-01T12:00:00Z)
      |> filter(fn: (r) =>  r["_field"] == "t"  or r["_field"] == "v1" or r["_field"] == "v2" or r["_field"] == "v3" or r["_field"] == "v4" or r["_field"] == "v5" )
      |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> map(fn: (r) => ({ r with computed: math.sqrt(x: math.pow(x: float(v: r.v1), y: 2.0) + math.pow(x: float(v: r.v2), y: 2.0) + math.pow(x: float(v: r.v3), y: 2.0) + math.pow(x: float(v: r.v4), y: 2.0) + math.pow(x: float(v: r.v5), y: 2.0)) }))
    

    
        pivoted
        |> aggregateWindow(every: 105192000ms, fn: min, createEmpty: false, column: "computed")
        |> yield(name: "v_min")
        

    
        pivoted
        |> aggregateWindow(every: 105192000ms, fn: max, createEmpty: false, column: "computed")
        |> yield(name: "v_max")
        

    
        pivoted
        |> aggregateWindow(every: 105192000ms, fn: first, createEmpty: false, column: "computed")
        |> yield(name: "t_first")
        

    
        pivoted
        |> aggregateWindow(every: 105192000ms, fn: last, createEmpty: false, column: "computed")
        |> yield(name: "t_last")
